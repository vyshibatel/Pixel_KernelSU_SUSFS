name: Build Coral 4.14 Kernel

on:
  workflow_call:  # This allows this workflow to be called from another workflow
  
jobs:
  build-kernel-4-14-kernelsu-susfs:
    runs-on: ubuntu-22.04

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192    # 8GB for root memory reservation
          temp-reserve-mb: 2048     # 2GB for temporary memory reservation
          swap-size-mb: 8192       # 8GB for swap size
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on matrix values
          CONFIG="coral"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Install Repo
        run: |
          # Install dependencies
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          # Define the branch names using the matrix values
          ANYKERNEL_BRANCH="non-gki"
          SUSFS_BRANCH="kernel-4.14"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/WildPlusKernel/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/WildPlusKernel/kernel_patches.git
      
      - name: Initialize and Sync Kernel Source
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          # Initialize and sync kernel source
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://android.googlesource.com/kernel/manifest -b android-msm-coral-4.14-android13 --repo-rev=v2.16 --depth=1

          # Sync repo and apply patches
          $REPO --version
          $REPO --trace sync -c -j$(nproc --all) --no-tags --fail-fast

      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/private/msm-google/"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s v1.0.8
          #cd ./KernelSU-Next/kernel
          #sed -i 's/ccflags-y += -DKSU_VERSION=16/ccflags-y += -DKSU_VERSION=12321/' ./Makefile
          
      - name: Apply SUSFS Patches
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/private/msm-google/"
          
          echo "Applying SUSFS patches..."
          
          # Copy SUSFS patches
          cp ../../../kernel_patches/next/0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch ./KernelSU-Next
          cp ../../../susfs4ksu/kernel_patches/50_add_susfs_in_kernel-4.14.patch ./
          cp ../../../susfs4ksu/kernel_patches/fs/* ./fs/
          cp ../../../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          cd ./KernelSU-Next
          
          # Apply SUSFS patch for KernelSU
          patch -p1 --forward < 0001-kernel-implement-susfs-v1.5.5-v1.5.7-KSUN-v1.0.8.patch || true
          
          # Change to common directory and apply SUSFS patch
          cd ..
          patch -p1 --fuzz=3 < 50_add_susfs_in_kernel-4.14.patch || true

          #cp ../../../kernel_patches/pixel/fdinfo.patch ./
          #patch -p1 --fuzz=3 < fdinfo.patch || true

          sed -i 's/^\(\s*\)u32 mask = mark->mask & IN_ALL_EVENTS;/\1\/\/u32 mask = mark->mask & IN_ALL_EVENTS;/' ./fs/notify/fdinfo.c
          sed -i 's/inotify_mark_user_mask(mark));/mask, mark->ignored_mask);/' ./fs/notify/fdinfo.c
          sed -i '/if (likely(current->susfs_task_state & TASK_STRUCT_NON_ROOT_USER_APP_PROC) &&/i \ \ \ \ u32 mask = mark->mask & IN_ALL_EVENTS;' ./fs/notify/fdinfo.c

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/private/msm-google/"
          # Apply additional patch
          cp ../../../kernel_patches/next/next_hooks_4.14.patch ./
          patch -p1 --fuzz=3 < ./next_hooks_4.14.patch

      - name: Add SUSFS Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/private/msm-google/"
          
          echo "Adding configuration settings to floral_defconfig..."

          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./arch/arm64/configs/floral_defconfig
          
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/arm64/configs/floral_defconfig
          
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/arm64/configs/floral_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./arch/arm64/configs/floral_defconfig

          sed -i 's/=m/=y/g' ./arch/arm64/configs/floral_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/private/msm-google/"
          
          echo "Running sed commands..."
          
          # Run sed commands for modifications
          #sed -i 's/check_defconfig//' ./build.config
          #sed -i 's/check_defconfig//' ./build.config.floral
          sed -i 's/check_defconfig && //' ./build.config.floral_no-cfi

          sed -i '$s|echo "\$res"|echo "\-Wild+"|' ./scripts/setlocalversion
          sed -i 's/-dirty//' ./scripts/setlocalversion
          
          # Run perl command to modify UTS_VERSION
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Sat Apr 20 04:20:00 UTC 2024"}' ./scripts/mkcompile_h

      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          BUILD_AOSP_KERNEL=1 ./build_floral.sh

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: source-${{ env.CONFIG }}
          path: ${{ env.CONFIG }}/out

      - name: Create Bootimgs Folder and Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Copying Image"
          cp ./out/android-msm-pixel-4.14/dist/Image.lz4 ../AnyKernel3/Image.lz4
          cp ./out/android-msm-pixel-4.14/dist/dtbo.img ../AnyKernel3/dtbo.img
          
      - name: Create ZIP Files for Different Formats
        run: |
          echo "Creating zip files for all formats..."
          cd ./AnyKernel3
          
          ZIP_NAME="Anykernel3-Coral-android13-4.14-Next-SUSFS.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
