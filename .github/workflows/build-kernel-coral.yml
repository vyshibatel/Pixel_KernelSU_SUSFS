name: Build Coral 4.14 Kernel

on:
  # Этот триггер ОБЯЗАТЕЛЕН, чтобы workflow можно было вызывать из другого
  workflow_call:

  # Этот триггер НЕОБЯЗАТЕЛЕН, он позволяет запускать workflow вручную
  workflow_dispatch:

jobs:
  build-kernel:
    runs-on: ubuntu-22.04

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'

      # --- Шаг 1: Клонируем ваш репозиторий с ядром ---
      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: vyshibatel/Pixel_Kernels # Указываем ваш репозиторий с ядром
          path: Pixel_Kernels # Клонируем его

      # --- Шаг 2: Клонируем AnyKernel3 для упаковки ---
      - name: Clone AnyKernel3
        run: git clone https://github.com/WildPlusKernel/AnyKernel3.git AnyKernel3

      # --- Шаг 3: Запускаем сборку ---
      - name: Build the Kernel
        run: |
          # Заходим в папку с вашими исходниками
          cd Pixel_Kernels
          
          # Запускаем скрипт сборки. Он будет работать с кодом, в котором находится.
          # BUILD_AOSP_KERNEL=1 теперь не нужен, т.к. мы уже в правильной директории
          ./build_floral.sh

      # --- Шаг 4: Упаковываем ZIP ---
      - name: Package with AnyKernel3
        run: |
          # Копируем скомпилированные артефакты в папку AnyKernel3
          cp Pixel_Kernels/out/android-msm-pixel-4.14/dist/Image.lz4 AnyKernel3/
          cp Pixel_Kernels/out/android-msm-pixel-4.14/dist/dtbo.img AnyKernel3/
          
          # Создаем ZIP
          cd AnyKernel3
          zip -r "../Anykernel3-Coral-Final.zip" ./*

      # --- Шаг 5: Выгружаем артефакт ---
      - name: Upload Kernel Zip
        uses: actions/upload-artifact@v4
        with:
          name: kernel-coral
          path: Anykernel3-Coral-Final.zip
